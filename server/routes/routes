import { users, documents, roles } from '../controllers';

module.exports = (app) => {
  app.get('/api', (req, res) => res.send({ msg: 'Welcome to DMS Api' }));

  // Users Schema definition
  /**
   * @swagger
   * definitions:
   *   Users:
   *     properties:
   *       name:
   *         type: string
   *       password:
   *         type: string
   *       roleId:
   *         type: integer
   *       email:
   *         type: string
   *
   *   UserLogin:
   *     properties:
   *       id:
   *         type: integer
   *       email:
   *         type: string
   *       password:
   *         type: string
   *       token:
   *         type: string
   *       roleId:
   *         type: integer
   *       documents:
   *         type: array
   *   Documents:
   *     properties:
   *       userId:
   *         type: integer
   *       title:
   *         type: string
   *       content:
   *         type: string
   *       access:
   *         type: integer
   *   Roles:
   *     properties:
   *       title:
   *         type: string
   */

  // Users Schema definition
  /**
   * @swagger
   * securityDefinitions:
   *  x-auth:
   *    type: apiKey
   *    in: header
   *    name: JWT-TOKEN
   */

  /**
   * @swagger
   * /users:
   *   post:
   *     tags:
   *       - Users
   *     description: Create a New User
   *     summary: Create a New User
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: user
   *         description: User object
   *         in: body
   *         required: true
   *         schema:
   *           $ref: '#/definitions/Users'
   *     responses:
   *       200:
   *         description: Successfully created
   *       412:
   *         description: User cannot be created
   */
  app.post('/users', users.create);

  /**
   * @swagger
   * /users/login:
   *   post:
   *     tags:
   *       - Users
   *     description: Logs in a user
   *     summary: Logs in a user
   *     produces:
   *       - application/json
   *     consumes:
   *       - application/x-www-form-data-urlencoded
   *     parameters:
   *       - name: email
   *         description: Registered Email Adderess
   *         in: body
   *         required: true
   *       - name: password
   *         description: Registered Password
   *         in: body
   *         required: true
   *     responses:
   *       200:
   *         description: Login Successful
   *         schema:
   *           $ref: '#/definitions/UserLogin'
   *       401:
   *         description: Invalid Username or Password
   *       412:
   *         description: Exception Error
   */
  app.post('/users/login', users.login);

  /**
   * @swagger
   * /users/login/token:
   *   get:
   *     tags:
   *       - Users
   *     description: Logs in a user with the x-auth token
   *     summary: Logs in a user by using the header token
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: token
   *         description: Users authorization token
   *         in: token
   *         required: true
   *     responses:
   *       200:
   *         description: Login Successful
   *         schema:
   *           $ref: '#/definitions/UserLogin'
   *       401:
   *         description: Invalid Username or Password
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/users/login/token', users.authenticate, users.loginByToken);

  /**
   * @swagger
   * /users/logout:
   *   get:
   *     tags:
   *       - Users
   *     description: Logs a user out
   *     summary: Logs a user out
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *        Logout Successful
   *     security:
   *     - x-auth:
   */
  app.get('/users/logout', users.logout);


  // Get all Users Routes
  /**
   * @swagger
   * /users:
   *   get:
   *     tags:
   *       - Users
   *     description: Returns all users
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of all users
   *         schema:
   *           $ref: '#/definitions/Users'
   *       404:
   *         description: Users not found
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/users', users.authenticate, users.isAdmin, users.getAll);

  /**
   * @swagger
   * users/{id}:
   *   get:
   *     tags:
   *       - Users
   *     description: Returns a single user
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: User's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: A single user
   *         schema:
   *           $ref: '#/definitions/Users'
   *       404:
   *         description: User not found
   *     security:
   *     - x-auth:
   */
  app.get('/users/:id', users.authenticate, users.isAdminOrOwner, users.getOne);

  /**
   * @swagger
   * users/{id}:
   *   put:
   *     tags:
   *       - Users
   *     description: Edit a single user
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: User's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully updated
   *       404:
   *         description: User cannot be found
   *     security:
   *     - x-auth:
   */
  app.put('/users/:id', users.authenticate, users.isAdminOrOwner, users.update);
/**
   * @swagger
   * /users/{id}:
   *   delete:
   *     tags:
   *       - Users
   *     description: Deletes a single user
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: User's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully deleted
   *       404:
   *         description: User cannot be found
   *     security:
   *     - x-auth:
   */
  app.delete('/users/:id', users.authenticate, users.isSuperAdmin, users.delete);

  /**
   * @swagger
   * /users/{id}/documents:
   *   get:
   *     tags:
   *       - Users
   *     description: Returns an array of user documents
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: User's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: An array of all users document
   *     security:
   *     - x-auth:
   */
  app.get('/users/:id/documents', users.authenticate, users.isAdminOrOwner, users.getDocuments);

  /**
   * @swagger
   * /users/search:
   *   get:
   *     tags:
   *       - Users
   *     description: Returns an array of users
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: q
   *         description: The search term to search for
   *         in: path
   *         required: true
   *         type: string
   *     responses:
   *       200:
   *         description: An array of all users
   *       404:
   *         description: No user found
   *     security:
   *     - x-auth:
   */
  app.get('/search/users/', users.authenticate, users.isAdmin, users.search);

  /**
   * @swagger
   * /documents:
   *   post:
   *     tags:
   *       - Documents
   *     description: Create a New Document
   *     summary: Create a New Document
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: document
   *         description: Document object
   *         in: body
   *         required: true
   *         schema:
   *           $ref: '#/definitions/Documents'
   *     responses:
   *       200:
   *         description: Successfully created
   *       412:
   *         description: Document cannot be created
   *     security:
   *     - x-auth:
   */
  app.post('/documents', users.authenticate, documents.create);

  // Get all Documents Routes
  /**
   * @swagger
   * /documents:
   *   get:
   *     tags:
   *       - Documents
   *     description: Returns all documents
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of all documents
   *         schema:
   *           $ref: '#/definitions/Documents'
   *       404:
   *         description: Documents not found
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/documents', users.authenticate, users.isAdmin, documents.getAll);

  // Get all public documents
  /**
   * @swagger
   * /documents/public:
   *   get:
   *     tags:
   *       - Documents
   *     description: Returns all public documents
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of all public documents
   *         schema:
   *           $ref: '#/definitions/Documents'
   *       404:
   *         description: Documents not found
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/documents/public', users.authenticate, documents.public);

  // Get all roles documents
  /**
   * @swagger
   * /documents/roles:
   *   get:
   *     tags:
   *       - Documents
   *     description: Returns all roles documents
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of all roles documents
   *         schema:
   *           $ref: '#/definitions/Documents'
   *       404:
   *         description: Documents not found
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/documents/roles', users.authenticate, documents.role);

  /**
   * @swagger
   * documents/{id}:
   *   get:
   *     tags:
   *       - Documents
   *     description: Returns a single document
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Documents's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: A single document
   *         schema:
   *           $ref: '#/definitions/Documents'
   *       404:
   *         description: Document not found
   *     security:
   *     - x-auth:
   */
  app.get('/documents/:id', users.authenticate, users.canManageDocument, documents.getOne);

  /**
   * @swagger
   * documents/{id}:
   *   put:
   *     tags:
   *       - Documents
   *     description: Edit a single document
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Document's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully updated
   *       404:
   *         description: Document cannot be found
   *     security:
   *     - x-auth:
   */
  app.put('/documents/:id', users.authenticate, users.canManageDocument, documents.update);

  /**
   * @swagger
   * /documents/{id}:
   *   delete:
   *     tags:
   *       - Documents
   *     description: Deletes a single document
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Document's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully deleted
   *       404:
   *         description: Document cannot be found
   *     security:
   *     - x-auth:
   */
  app.delete('/documents/:id', users.authenticate, users.canManageDocument, documents.delete);

  /**
   * @swagger
   * /documents/search:
   *   get:
   *     tags:
   *       - Documents
   *     description: Returns an array of documents
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: q
   *         description: The search term to search for
   *         in: path
   *         required: true
   *         type: string
   *     responses:
   *       200:
   *         description: An array of all documents
   *       404:
   *         description: No document found
   *     security:
   *     - x-auth:
   */
  app.get('/search/documents/', users.authenticate, documents.search);


  // Get all Roles
  /**
   * @swagger
   * /roles:
   *   get:
   *     tags:
   *       - Roles
   *     description: Returns all roles
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of all roles
   *         schema:
   *           $ref: '#/definitions/Roles'
   *       404:
   *         description: Roles not found
   *       412:
   *         description: Exception Error
   *     security:
   *     - x-auth:
   */
  app.get('/roles', users.authenticate, roles.getAll);

  /**
   * @swagger
   * /roles:
   *   post:
   *     tags:
   *       - Roles
   *     description: Create a New Role
   *     summary: Create a New Role
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: role
   *         description: Role object
   *         in: body
   *         required: true
   *         schema:
   *           $ref: '#/definitions/Roles'
   *     responses:
   *       200:
   *         description: Successfully created
   *       412:
   *         description: Role cannot be created
   *     security:
   *     - x-auth:
   */
  app.post('/roles', users.authenticate, users.isSuperAdmin, roles.create);


  /**
   * @swagger
   * roles/{id}:
   *   get:
   *     tags:
   *       - Roles
   *     description: Returns a single role
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Roles's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: A single document
   *         schema:
   *           $ref: '#/definitions/Roles'
   *       404:
   *         description: Role not found
   *     security:
   *     - x-auth:
   */
  app.get('/roles/:id', roles.getOne);

  /**
   * @swagger
   * roles/{id}:
   *   put:
   *     tags:
   *       - Roles
   *     description: Edit a single role
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Role's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully updated
   *       404:
   *         description: Role cannot be found
   *     security:
   *     - x-auth:
   */
  app.put('/roles/:id', users.authenticate, users.isSuperAdmin, roles.update);

  /**
   * @swagger
   * /roles/{id}:
   *   delete:
   *     tags:
   *       - Roles
   *     description: Deletes a single role
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         description: Role's id
   *         in: path
   *         required: true
   *         type: integer
   *     responses:
   *       200:
   *         description: Successfully deleted
   *       404:
   *         description: Role cannot be found
   *     security:
   *     - x-auth:
   */
  app.delete('/roles/:id', users.authenticate, users.isSuperAdmin, roles.delete);
};
